task {
  recovery-dir = work
  step.retry-delay = 5 seconds
  StepExecutorDispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 10
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }
}

satellite {

  enabled = no

  port = 8180
  #hostname = "" #Host name or ip address to bind to

  ssl {
    enabled = yes
    port = 8280
    trust-store = "changeme"
    trust-store-password = "changeme"

    # Protocol to use for SSL encryption, choose from:
    # Java 7:
    #   'TLSv1.1', 'TLSv1.2'
    protocol = "TLSv1.2"

    # Example: ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"]
    # You need to install the JCE Unlimited Strength Jurisdiction Policy
    # Files to use AES 256.
    # More info here:
    # http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEP
    enabled-algorithms = ["TLS_RSA_WITH_AES_128_CBC_SHA"]

    # There are three options, in increasing order of security:
    # "" or SecureRandom => (default)
    # "SHA1PRNG" => Can be slow because of blocking issues on Linux
    # "AES128CounterSecureRNG" => fastest startup and based on AES encryption
    # "AES256CounterSecureRNG"
    # The following use one of 3 possible seed sources, depending on
    # availability: /dev/random, random.org and SecureRandom (provided by Java)
    # "AES128CounterInetRNG"
    # "AES256CounterInetRNG" (Install JCE Unlimited Strength Jurisdiction
    # Policy Files first)
    # Setting a value here may require you to supply the appropriate cipher
    # suite (see enabled-algorithms section above)
    random-number-generator = "AES128CounterSecureRNG"
  }

  timeout {
    ping = "5 seconds"
    upload.idle = "30 seconds"
    streaming = "10 seconds"
  }

  streaming {
    # Maximum amount of concurrent uploads per task
    max-uploads = 10
  }

}

